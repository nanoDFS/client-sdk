// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/file_streaming.proto

package filestreamer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileStreamingService_Read_FullMethodName   = "/filestreamer.FileStreamingService/Read"
	FileStreamingService_Write_FullMethodName  = "/filestreamer.FileStreamingService/Write"
	FileStreamingService_Delete_FullMethodName = "/filestreamer.FileStreamingService/Delete"
)

// FileStreamingServiceClient is the client API for FileStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileStreamingServiceClient interface {
	Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Payload], error)
	Write(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Payload, WriteRes], error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteRes, error)
}

type fileStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileStreamingServiceClient(cc grpc.ClientConnInterface) FileStreamingServiceClient {
	return &fileStreamingServiceClient{cc}
}

func (c *fileStreamingServiceClient) Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Payload], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileStreamingService_ServiceDesc.Streams[0], FileStreamingService_Read_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadReq, Payload]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileStreamingService_ReadClient = grpc.ServerStreamingClient[Payload]

func (c *fileStreamingServiceClient) Write(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Payload, WriteRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileStreamingService_ServiceDesc.Streams[1], FileStreamingService_Write_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Payload, WriteRes]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileStreamingService_WriteClient = grpc.ClientStreamingClient[Payload, WriteRes]

func (c *fileStreamingServiceClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRes)
	err := c.cc.Invoke(ctx, FileStreamingService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileStreamingServiceServer is the server API for FileStreamingService service.
// All implementations must embed UnimplementedFileStreamingServiceServer
// for forward compatibility.
type FileStreamingServiceServer interface {
	Read(*ReadReq, grpc.ServerStreamingServer[Payload]) error
	Write(grpc.ClientStreamingServer[Payload, WriteRes]) error
	Delete(context.Context, *DeleteReq) (*DeleteRes, error)
	mustEmbedUnimplementedFileStreamingServiceServer()
}

// UnimplementedFileStreamingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileStreamingServiceServer struct{}

func (UnimplementedFileStreamingServiceServer) Read(*ReadReq, grpc.ServerStreamingServer[Payload]) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedFileStreamingServiceServer) Write(grpc.ClientStreamingServer[Payload, WriteRes]) error {
	return status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedFileStreamingServiceServer) Delete(context.Context, *DeleteReq) (*DeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFileStreamingServiceServer) mustEmbedUnimplementedFileStreamingServiceServer() {}
func (UnimplementedFileStreamingServiceServer) testEmbeddedByValue()                              {}

// UnsafeFileStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileStreamingServiceServer will
// result in compilation errors.
type UnsafeFileStreamingServiceServer interface {
	mustEmbedUnimplementedFileStreamingServiceServer()
}

func RegisterFileStreamingServiceServer(s grpc.ServiceRegistrar, srv FileStreamingServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileStreamingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileStreamingService_ServiceDesc, srv)
}

func _FileStreamingService_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileStreamingServiceServer).Read(m, &grpc.GenericServerStream[ReadReq, Payload]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileStreamingService_ReadServer = grpc.ServerStreamingServer[Payload]

func _FileStreamingService_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileStreamingServiceServer).Write(&grpc.GenericServerStream[Payload, WriteRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileStreamingService_WriteServer = grpc.ClientStreamingServer[Payload, WriteRes]

func _FileStreamingService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStreamingServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileStreamingService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStreamingServiceServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FileStreamingService_ServiceDesc is the grpc.ServiceDesc for FileStreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileStreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filestreamer.FileStreamingService",
	HandlerType: (*FileStreamingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _FileStreamingService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _FileStreamingService_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Write",
			Handler:       _FileStreamingService_Write_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/file_streaming.proto",
}

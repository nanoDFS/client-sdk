// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/file_metadata.proto

package filemetadata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileMetadataService_UploadFile_FullMethodName   = "/filemetadata.FileMetadataService/UploadFile"
	FileMetadataService_DownloadFile_FullMethodName = "/filemetadata.FileMetadataService/DownloadFile"
	FileMetadataService_DeleteFile_FullMethodName   = "/filemetadata.FileMetadataService/DeleteFile"
)

// FileMetadataServiceClient is the client API for FileMetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileMetadataServiceClient interface {
	UploadFile(ctx context.Context, in *FileUploadReq, opts ...grpc.CallOption) (*UploadResp, error)
	DownloadFile(ctx context.Context, in *FileDownloadReq, opts ...grpc.CallOption) (*DownloadResp, error)
	DeleteFile(ctx context.Context, in *FileDeleteReq, opts ...grpc.CallOption) (*DeleteResp, error)
}

type fileMetadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileMetadataServiceClient(cc grpc.ClientConnInterface) FileMetadataServiceClient {
	return &fileMetadataServiceClient{cc}
}

func (c *fileMetadataServiceClient) UploadFile(ctx context.Context, in *FileUploadReq, opts ...grpc.CallOption) (*UploadResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadResp)
	err := c.cc.Invoke(ctx, FileMetadataService_UploadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMetadataServiceClient) DownloadFile(ctx context.Context, in *FileDownloadReq, opts ...grpc.CallOption) (*DownloadResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadResp)
	err := c.cc.Invoke(ctx, FileMetadataService_DownloadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileMetadataServiceClient) DeleteFile(ctx context.Context, in *FileDeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResp)
	err := c.cc.Invoke(ctx, FileMetadataService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileMetadataServiceServer is the server API for FileMetadataService service.
// All implementations must embed UnimplementedFileMetadataServiceServer
// for forward compatibility.
type FileMetadataServiceServer interface {
	UploadFile(context.Context, *FileUploadReq) (*UploadResp, error)
	DownloadFile(context.Context, *FileDownloadReq) (*DownloadResp, error)
	DeleteFile(context.Context, *FileDeleteReq) (*DeleteResp, error)
	mustEmbedUnimplementedFileMetadataServiceServer()
}

// UnimplementedFileMetadataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileMetadataServiceServer struct{}

func (UnimplementedFileMetadataServiceServer) UploadFile(context.Context, *FileUploadReq) (*UploadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileMetadataServiceServer) DownloadFile(context.Context, *FileDownloadReq) (*DownloadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileMetadataServiceServer) DeleteFile(context.Context, *FileDeleteReq) (*DeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileMetadataServiceServer) mustEmbedUnimplementedFileMetadataServiceServer() {}
func (UnimplementedFileMetadataServiceServer) testEmbeddedByValue()                             {}

// UnsafeFileMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileMetadataServiceServer will
// result in compilation errors.
type UnsafeFileMetadataServiceServer interface {
	mustEmbedUnimplementedFileMetadataServiceServer()
}

func RegisterFileMetadataServiceServer(s grpc.ServiceRegistrar, srv FileMetadataServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileMetadataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileMetadataService_ServiceDesc, srv)
}

func _FileMetadataService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMetadataServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileMetadataService_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMetadataServiceServer).UploadFile(ctx, req.(*FileUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMetadataService_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDownloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMetadataServiceServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileMetadataService_DownloadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMetadataServiceServer).DownloadFile(ctx, req.(*FileDownloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileMetadataService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileMetadataServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileMetadataService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileMetadataServiceServer).DeleteFile(ctx, req.(*FileDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FileMetadataService_ServiceDesc is the grpc.ServiceDesc for FileMetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileMetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filemetadata.FileMetadataService",
	HandlerType: (*FileMetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _FileMetadataService_UploadFile_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _FileMetadataService_DownloadFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileMetadataService_DeleteFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/file_metadata.proto",
}
